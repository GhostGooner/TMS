###Разворачиваем 2 виртуальные машины, и ставим на них PG.###

echo  "deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
apt-get install postgresql -y

###Далее устанавливаем утилиты net-tools, keepalive.###

apt-get install net-tools
apt-get install keepalive

###для своего кластера я выделил ip-адреса.###
1) 192.168.7.196 - master
2) 192.168.7.197 - slave
3) 192.168.7.199 - виртуальный ip (плавающий)
4) 192.168.7.200 - ip для запросов.

###Настроим конфиги PG###

nano /etc/postgresql/14/main/postgresql.conf

listen_addresses = '*'
wal_level = replica
wal_log_hints = on
archive_mode = on
archive_command = 'test ! -f /var/lib/postgresql/14/main/archivedir/%f && cp %p /var/lib/postgresql/14/main/archivedir/%f'
max_wal_senders = 10
wal_keep_size = 160

su - postgres
createdb clusterdb
psql -d clusterdb -U postgres -c "CREATE TABLE test_table(x integer)"
psql -d clusterdb -U postgres -c "INSERT INTO test_table(x) SELECT y FROM generate_series(1, 100) a(y)"

psql -d clusterdb -U postgres -c "SELECT count(*) from test_table"

#данные строчки добавляем в конфиг мастера в конец файла.

systemctl stop postgresql
mv /var/lib/postgresql/14 /root

nano /etc/postgresql/14/main/postgresql.conf

listen_addresses = '*'
wal_level = replica
archive_mode = on
archive_command = 'test ! -f /var/lib/postgresql/14/main/archivedir/%f && cp %p /var/lib/postgresql/14/main/archivedir/%f'
restore_command = 'cp /var/lib/postgresql/14/main/archivedir/%f %p' 
archive_cleanup_command = 'pg_archivecleanup /var/lib/postgresql/14/main/archivedir %r'
max_wal_senders = 10
wal_keep_size = 160
hot_standby = on

#эти на слейв.

###Далее редактируем файл конфига pg_hba###

#Для мастера
mkdir /var/lib/postgresql/14/main/archivedir/
chown -R postgres:postgres /var/lib/postgresql/14/main/archivedir/
 
nano /etc/postgresql/14/main/pg_hba.conf
  
host    replication     all             192.168.7.197/24     trust 
host    clusterdb       postgres        192.168.7.200/24     trust

#Для слейва
nano /etc/postgresql/14/main/pg_hba.conf
 
host    replication   all          192.168.7.196/24    trust
host    clusterdb     postgres     192.168.7.200/24    trust

###Настройка keepalive###

#Для мастера

mkdir /etc/keepalived/scripts
nano /etc/keepalived/scripts/check_postgres

#!/bin/bash
# Run me on the Master
 
master_ip="192.168.7.196"
slave_ip="192.168.7.197"
pg_ctl="/usr/lib/postgresql/14/bin/pg_ctl"
pg_home="/var/lib/postgresql/14/main/"
 
(echo >/dev/tcp/"$master_ip"/5432) &>/dev/null && echo "All is OK"; exit 0 || ssh postgres@"$slave_ip" "$pg_ctl -D $pg_home promote"; exit 1

chmod +x /etc/keepalived/scripts/check_postgres

#Для слейва

mkdir /etc/keepalived/scripts

nano /etc/keepalived/scripts/check_postgres
 
#!/bin/bash
# Run me on the Slave
 
master_ip="192.168.7.196"
slave_ip="192.168.7.197"
pg_ctl="/usr/lib/postgresql/14/bin/pg_ctl"
pg_home="/var/lib/postgresql/14/main/"
 
(echo >/dev/tcp/"$master_ip"/5432) &>/dev/null && echo "All is OK"; exit 0 || ssh postgres@"$slave_ip" "$pg_ctl -D $pg_home promote"; exit 1
 

chmod +x /etc/keepalived/scripts/check_postgres


#Далее сами конфигурации
#Мастер

nano /etc/keepalived/keepalived.conf
 
 
vrrp_script chk_pg_port {
        script "/bin/bash /etc/keepalived/scripts/check_postgres"
        interval 2
        weight 2
}
vrrp_instance VI_1 {
        interface ens160
        state MASTER
        virtual_router_id 51
        priority 101
        authentication {
            auth_type PASS
            auth_pass #Пароль администратора#
        }
        track_script {
            chk_pg_port
        }
        virtual_ipaddress {
                192.168.7.199/24 dev ens160
        }
}


#Для слейва

nano /etc/keepalived/keepalived.conf
 
 
vrrp_script chk_pg_port {
        script "/bin/bash /etc/keepalived/scripts/check_postgres"
        interval 2
        weight 2
}
vrrp_instance VI_1 {
        interface ens160
        state MASTER
        virtual_router_id 51
        priority 100
        authentication {
            auth_type PASS
            auth_pass #Пароль администратора#
        }
        track_script {
            chk_pg_port
        }
        virtual_ipaddress {
                192.168.7.199/24 dev ens160
        }
}

### добавим на всякий случай в iptables
iptables -A INPUT -s 192.168.7.0/24 -j ACCEPT

проверим чтоб слушались порты.
netstat -tulpn | grep LISTEN

###донастроим машинки
#на слейве.
su - postgres
pg_basebackup -h 192.168.7.196 -U postgres -D /var/lib/postgresql/14/main -P -Xs -R

#создадим ключи
 su - postgres
 ssh-keygen -t rsa
 vi .ssh/authorized_keys

ключи добавляем в данный файлик на каждой машине.

### проверяем получение виртуального адреса

root@ubuntutmsclu:~# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens160: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:50:56:8f:17:37 brd ff:ff:ff:ff:ff:ff
    altname enp3s0
    inet 192.168.7.196/24 brd 192.168.7.255 scope global ens160
       valid_lft forever preferred_lft forever
    inet 192.168.7.199/24 scope global secondary ens160
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:fe8f:1737/64 scope link
       valid_lft forever preferred_lft forever

! Соответственно на слейве этого ip не будет.

### выключаем основную машинку и видим, что адрес перешел на слейв. На слейве делаем запрос к бд по виртуальному адресу.
psql -d clusterdb -h 192.168.7.199 -U postgres -c "SELECT count(*) from test_table"
получаем ответ того, что мы создали.

Данные машинки бэкапятся veeam. Так же делаются снапшоты через vcentr vmware.
